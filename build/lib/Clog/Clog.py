# Clogger/Clog.py

import logging
import time
import re
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

class ColoredFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞."""

    def format(self, record):
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        original_msg = super().format(record)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if record.levelno == logging.INFO:
            color = Fore.GREEN
            status = "–£—Å–ø–µ—Ö ‚úì"
        elif record.levelno == logging.WARNING:
            color = Fore.YELLOW
            status = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚ö†"
        elif record.levelno == logging.ERROR:
            color = Fore.RED
            status = "–û—à–∏–±–∫–∞ êÑÇ"
        else:
            color = Fore.WHITE
            status = "–õ–æ–≥"

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—É—Ç–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        original_msg = self.highlight_paths(original_msg)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
        elapsed_time = time.time() - record.created

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_msg = f"[{color}{status}{Style.RESET_ALL} | {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥] | {original_msg}"
        return formatted_msg

    @staticmethod
    def highlight_paths(message):
        """–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –ø—É—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∂—ë–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º."""
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–µ–π
        path_pattern = re.compile(
            r'([A-Za-z]:\\(?:[^\\/:*?"<>|\r\n]+\\)*[^\\/:*?"<>|\r\n]*)|'
            r'(/(?:[^/ ]*/)*[^/ ]*)'
        )
        
        # –ó–∞–º–µ–Ω–∞ –ø—É—Ç–µ–π –Ω–∞ –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã–µ –∂—ë–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º
        return path_pattern.sub(lambda match: Fore.YELLOW + match.group(0) + Style.RESET_ALL, message)

def setup_custom_logger(name):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(name)
    logger.setLevel(logging.DEBUG)

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.DEBUG)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–∞
    formatter = ColoredFormatter('%(message)s')
    console_handler.setFormatter(formatter)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(console_handler)

    return logger
